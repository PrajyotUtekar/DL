# a. IMPORTING NECESSARY PACKAGES ->
import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
import random

# b. LOAD THE TRAINING AND TESTING DATA (MNIST) ->
mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Normalize the pixel values to the range [0, 1]
x_train = x_train / 255.0
x_test = x_test / 255.0

# c. DEFINE THE NETWORK ARCHITECTURE USING KERAS ->
model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)),
    keras.layers.Dense(128, activation="relu"),
    keras.layers.Dense(10, activation="softmax")
])


model.summary()


# d. TRAIN THE MODEL USING SGD ->
model.compile(optimizer="sgd",
              loss="sparse_categorical_crossentropy",
              metrics=['accuracy'])

history = model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=10)


# e. EVALUATE THE NETWORK
test_loss, test_acc = model.evaluate(x_test, y_test)
print("Test Loss = {:.3f}".format(test_loss))
print("Test Accuracy = {:.3f}".format(test_acc))

# Randomly choose an image from the test set to predict
n = random.randint(0, len(x_test) - 1)
plt.imshow(x_test[n], cmap="gray")
plt.show()
predicted_values = model.predict(x_test)
print("Predicted Probabilities: ", predicted_values[n])


# f. PLOT THE TRAINING LOSS AND ACCURACY ->
# Plotting The Training Accuracy
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()

# Plotting The Training Loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()



